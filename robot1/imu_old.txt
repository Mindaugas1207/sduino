

// constexpr double ACCEL_LSB_TO_MPS2(double raw) { return (raw * 24.0 * G_EARTH) / (double)(1 << (16 - 1)); }
// constexpr double GYRO_LSB_TO_RPS(double raw) { return (raw * (double)(2000.0 * M_PI)) / (180.0 * (double)(1 << (16 - 1))); }
// constexpr double MAG_LSB_TO_UT(double raw) { return (raw * 1000.0) / (double)(1 << (14)); }

// MMC5603_inst_t MMC5603dev;

// #ifdef IMU_USE_MAG
//     if (MMC5603_init(&MMC5603dev, i2c_inst, PORT_CHANNEL_ANY, MMC5603_DEFAULT_ADDRESS) != MMC5603_OK) {
//         printf("MMC INIT FAIL\n");
//         return false;
//     }
// #endif
    
// #ifdef IMU_USE_MAG
//     //MMC5603_ReadDataBlocking(&MMC5603dev);;
//     //if (MMC5603_NewDataReady(&MMC5603dev) == MMC5603_DATA_READY)
//     MMC5603_ReadDataBlocking(&MMC5603dev);
// #endif
// //    absolute_time_t t1 = get_absolute_time();
    
// //    int64_t del = absolute_time_diff_us(t1, get_absolute_time());

//     // if (new_data)
//     // {
//         // if (to_us_since_boot(get_absolute_time()) > to_us_since_boot(prt))
//         // {
//         //     printf("dt: %lld\n", del);
//         //     prt = make_timeout_time_ms(50);
//         // }
//     // }
//     // _output[0] = ACCEL_LSB_TO_MPS2(data[0]);
//     // _output[1] = ACCEL_LSB_TO_MPS2(data[1]);
//     // _output[2] = ACCEL_LSB_TO_MPS2(data[2]);
//     // _output[3] = GYRO_LSB_TO_RPS(data[3]);
//     // _output[4] = GYRO_LSB_TO_RPS(data[4]);
//     // _output[5] = GYRO_LSB_TO_RPS(data[5]);
// #ifdef IMU_USE_MAG
//     _output[6] = MAG_LSB_TO_UT(MMC5603dev.mag.x);
//     _output[7] = MAG_LSB_TO_UT(MMC5603dev.mag.y);
//     _output[8] = MAG_LSB_TO_UT(MMC5603dev.mag.z);

//     //printf("X:% .6f, Y:% .6f, Z:% .6f\n", _output[6], _output[7], _output[8]);
// #endif
// }

// #ifdef IMU_USE_MAG
// void IMU_s::magCalibrationInit()
// {
//     Magnetometer.Min.X = std::numeric_limits<double>::max();
//     Magnetometer.Max.X = std::numeric_limits<double>::lowest();
//     Magnetometer.Min.Y = std::numeric_limits<double>::max();
//     Magnetometer.Max.Y = std::numeric_limits<double>::lowest();
//     Magnetometer.Min.Z = std::numeric_limits<double>::max();
//     Magnetometer.Max.Z = std::numeric_limits<double>::lowest();
    
//     CalibrationTimeout = make_timeout_time_ms(MagCalibrationTime_ms);
// }
// #endif

        // absolute_time_t t1 = get_absolute_time();
        // int64_t del = absolute_time_diff_us(t1, get_absolute_time());
        //         printf("dt: %lld\n", del);
        //         PrintTimeout = make_timeout_time_ms(50);
// #ifdef IMU_USE_MAG
//     else if (!Magnetometer.Calibrated)
//     {
//         if (to_us_since_boot(_TimeNow) > to_us_since_boot(CalibrationTimeout))
//         {
//             calculateMagCal();
//             Magnetometer.Calibrated = true;
//             printf("DBG:IMU_MAG_OK\n");
//             gpio_put(SDUINO_INTERNAL_LED_PIN, 0);
//         }
//         else
//             getMagMaxMin();
//     }
// #endif
        //FusionStarted = Fusion.initQuat(-Accelerometer.Mean.X, Accelerometer.Mean.Y, Accelerometer.Mean.Z,
        //                                -Magnetometer.Mean.X, -Magnetometer.Mean.Y, -Magnetometer.Mean.Z);
        // printf("Mag Max %f, %f, %f\n", Magnetometer.Max.X, Magnetometer.Max.Y, Magnetometer.Max.Z);
        // printf("Mag Min %f, %f, %f\n", Magnetometer.Min.X, Magnetometer.Min.Y, Magnetometer.Min.Z);
        // printf("Mag mean %f, %f, %f\n", Magnetometer.Mean.X, Magnetometer.Mean.Y, Magnetometer.Mean.Z);
        // printf("Mag bias %f, %f, %f\n", Magnetometer.Bias.X, Magnetometer.Bias.Y, Magnetometer.Bias.Z);
        // printf("Mag Scale %f, %f, %f\n", Magnetometer.Scale.X, Magnetometer.Scale.Y, Magnetometer.Scale.Z);

// void IMU_s::compute(bool _NewData, absolute_time_t _TimeNow)
// {
//     //printf("Raw %f, %f, %f, %f, %f, %f, %f, %f, %f\n", Accelerometer.Raw.X, Accelerometer.Raw.Y, Accelerometer.Raw.Z, Gyroscope.Raw.X, Gyroscope.Raw.Y, Gyroscope.Raw.Z, Magnetometer.Raw.X, Magnetometer.Raw.Y, Magnetometer.Raw.Z);
//     Accelerometer.Value.X = Accelerometer.Raw.X - Accelerometer.Bias.X;
//     Accelerometer.Value.Y = Accelerometer.Raw.Y - Accelerometer.Bias.Y;
//     Accelerometer.Value.Z = Accelerometer.Raw.Z - Accelerometer.Bias.Z;

//     Gyroscope.Value.X = Gyroscope.Raw.X - Gyroscope.Bias.X;
//     Gyroscope.Value.Y = Gyroscope.Raw.Y - Gyroscope.Bias.Y;
//     Gyroscope.Value.Z = Gyroscope.Raw.Z - Gyroscope.Bias.Z;

// #ifdef IMU_USE_MAG
//     Magnetometer.Value.X = (Magnetometer.Raw.X - Magnetometer.Bias.X) * Magnetometer.Scale.X;
//     Magnetometer.Value.Y = (Magnetometer.Raw.Y - Magnetometer.Bias.Y) * Magnetometer.Scale.Y;
//     Magnetometer.Value.Z = (Magnetometer.Raw.Z - Magnetometer.Bias.Z) * Magnetometer.Scale.Z;

//     //Magnetometer.Value.X = (Magnetometer.Raw.X - Magnetometer.Bias.X);
//     //Magnetometer.Value.Y = (Magnetometer.Raw.Y - Magnetometer.Bias.Y);
//     //Magnetometer.Value.Z = (Magnetometer.Raw.Z - Magnetometer.Bias.Z);

//     // Magnetometer.Value.X = (Magnetometer.Raw.X);
//     // Magnetometer.Value.Y = (Magnetometer.Raw.Y);
//     // Magnetometer.Value.Z = (Magnetometer.Raw.Z);
// #endif
//     double dt = ((absolute_time_diff_us(LastTime, _TimeNow)) / 1000000.0); // set integration time by time elapsed since last filter update
//     LastTime = _TimeNow;
// #ifdef IMU_USE_MAG
//     // Fusion.MadgwickUpdate(
//     //      Gyroscope.Value.X,
//     //     -Gyroscope.Value.Y,
//     //     -Gyroscope.Value.Z,
//     //     -Accelerometer.Value.X,
//     //      Accelerometer.Value.Y,
//     //      Accelerometer.Value.Z,
//     //     -Magnetometer.Value.X,
//     //      Magnetometer.Value.Y,
//     //     -Magnetometer.Value.Z,
//     //      dt);
//     Fusion.MadgwickUpdate_kriswiner(
//         -Accelerometer.Value.X,
//          Accelerometer.Value.Y,
//          Accelerometer.Value.Z,
//          Gyroscope.Value.X,
//         -Gyroscope.Value.Y,
//         -Gyroscope.Value.Z,
//         -Magnetometer.Value.X,
//          Magnetometer.Value.Y,
//         -Magnetometer.Value.Z,
//          dt);
// #else
//     Fusion.MadgwickUpdate(
//          Gyroscope.Value.X,
//          Gyroscope.Value.Y,
//          Gyroscope.Value.Z,
//          Accelerometer.Value.X,
//          Accelerometer.Value.Y,
//          Accelerometer.Value.Z,
//          dt);
// #endif
//     auto [w, x, y, z] = Fusion.getQuaternion();
//     quat_t Quaternion = {w, x, y, z};
   // matrix_t Rotation;
    // //matrix_t Transposition;
    // vect_t Instantaneous_Acceleration;
    
    // //vect_t Displacement;
    // //double alpha_a = 0.1f;
    // //double A;
    // //vect_t AngularVelocity;
    

    //Get rotation (frame to world)
    //Rotation = getRotationMatrix(Quaternion);
    // //A = getMatrixDeterminant(Rotation);
    // //Get transposition (reverse rotation)
    // //Transposition = getMatrixTranspose(Rotation);

    // // a = dv / dt => dv = a * dt, v += dv
    // // v = ds / dt => ds = v * dt, s += ds
    // //Acceleration (m/s/s)
    // if (_NewData)
    // {
    //     Instantaneous_Acceleration = rotateVector(Accelerometer.Value, Rotation); //Rotate from local frame to world
    //     Instantaneous_Acceleration.Z -= G_EARTH;
    //     Average_Acceleration = Instantaneous_Acceleration + Last_Instantaneous_Acceleration;
    //     Average_Acceleration /= 2.0f;
    //     Last_Instantaneous_Acceleration = Instantaneous_Acceleration;

    //     double dtF = ((absolute_time_diff_us(LastTimeF, _TimeNow)) / 1000000.0f); // set integration time by time elapsed since last filter update
    //     LastTimeF = _TimeNow;

    //     E_X = ftest(Average_Acceleration.X, Average_Acceleration.Y, Average_Acceleration.Z, dtF, 0.1f, 0.1f);
    // }

    

    

    // //Velocity (m/s)
    // //Velocity += Average_Acceleration * dt;
    // //Displacement (m)
    // //Displacement = Velocity * dt + LastDisplacement * 0.99f;
    // //LastDisplacement = Displacement;
    // //Orientation in Euler angles (rad)
    //Orientation = getEulerAngles(Rotation);
    // //Angular Velocity (rad/s)
    // //AngularVelocity = rotateVector(Gyroscope.Value, Rotation); //Rotate from local frame to world
    //  if (to_us_since_boot(get_absolute_time()) > to_us_since_boot(PrintTimeout))
    //  {
     //       printf("O> R:% .9f, P:% .9f, Y:% .9f\n", Orientation.Roll * 180.0 / M_PI, Orientation.Pitch * 180.0 / M_PI, Orientation.Yaw * 180.0 / M_PI);
    //     // printf("m> % .9f, % .9f, % .9f\n"
    //     //        "   % .9f, % .9f, % .9f\n"
    //     //        "   % .9f, % .9f, % .9f\n"
    //     //        "A> % .9f\n",
    //     //        Rotation[0][0], Rotation[0][1], Rotation[0][2],
    //     //        Rotation[1][0], Rotation[1][1], Rotation[1][2],
    //     //        Rotation[2][0], Rotation[2][1], Rotation[2][2],
    //     //        A);
    //     //printf("s> X:% .9f, Y:% .9f, Z:% .9f\n", Accelerometer.Value.X, Accelerometer.Value.Y, Accelerometer.Value.Z);
    //     //printf("SF: dt % .9f\n", dt);
    //     //printf("ev % .9f\n", E_velocity);
    //     //printf("A> X:% .9f, Y:% .9f, Z:% .9f\n", Average_Acceleration.X, Average_Acceleration.Y, Average_Acceleration.Z);
    //     //printf("V> X:% .9f, Y:% .9f, Z:% .9f\n", Velocity.X, Velocity.Y, Velocity.Z);
    //     printf("P> X:% .9f, Y:% .9f, Z:% .9f\n"
    //            "V> X:% .9f, Y:% .9f, Z:% .9f\n"
    //            "A> X:% .9f, Y:% .9f, Z:% .9f\n", E_X(0), E_X(3), E_X(6),
    //                                              E_X(1), E_X(4), E_X(7),
    //                                              E_X(2), E_X(5), E_X(8));
    //     //printf("S> X:% .9f, Y:% .9f, Z:% .9f\n", Displacement.X, Displacement.Y, Displacement.Z);
    //     //printf("f> X:% .9f, Y:% .9f, Z:% .9f\n", AngularVelocity.X, AngularVelocity.Y, AngularVelocity.Z);
    //      PrintTimeout = make_timeout_time_ms(50);
    //  }



// void IMU_s::ftest_init()
// {
//     e_x << 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f;
//     e_P << 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
//            0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
//            0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
//            0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
//            0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f,
//            0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f,
//            0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
//            0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f,
//            0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f;
// }

// Eigen::Matrix<double, 9, 1> IMU_s::ftest(double accelerationX, double accelerationY, double accelerationZ, double dt, double sigma_a, double sigma_m)
// {
//     using namespace Eigen;
//     // State transition matrix
//     Matrix<double, 9, 9> F;
//     F << 1.0f,   dt, 0.5f*dt*dt, 0.0f, 0.0f,       0.0f, 0.0f, 0.0f,       0.0f,
//          0.0f, 1.0f,         dt, 0.0f, 0.0f,       0.0f, 0.0f, 0.0f,       0.0f,
//          0.0f, 0.0f,       1.0f, 0.0f, 0.0f,       0.0f, 0.0f, 0.0f,       0.0f,
//          0.0f, 0.0f,       0.0f, 1.0f,   dt, 0.5f*dt*dt, 0.0f, 0.0f,       0.0f,
//          0.0f, 0.0f,       0.0f, 0.0f, 1.0f,         dt, 0.0f, 0.0f,       0.0f,
//          0.0f, 0.0f,       0.0f, 0.0f, 0.0f,       1.0f, 0.0f, 0.0f,       0.0f,
//          0.0f, 0.0f,       0.0f, 0.0f, 0.0f,       0.0f, 1.0f,   dt, 0.5f*dt*dt,
//          0.0f, 0.0f,       0.0f, 0.0f, 0.0f,       0.0f, 0.0f, 1.0f,         dt,
//          0.0f, 0.0f,       0.0f, 0.0f, 0.0f,       0.0f, 0.0f, 0.0f,       1.0f;

//     // Measurement matrix
//     Matrix<double, 3, 9> H;
//     H << 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
//          0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f,
//          0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f;

//     // Process noise covariance
//     double dt4 = dt*dt*dt*dt;
//     double dt3 = dt*dt*dt;
//     double dt2 = dt*dt;
//     Matrix<double, 9, 9> Q;
//     Q << dt4/4, dt3/2, dt2/2,  0.0f,  0.0f,  0.0f,  0.0f,  0.0f,  0.0f,
//          dt3/2,   dt2,    dt,  0.0f,  0.0f,  0.0f,  0.0f,  0.0f,  0.0f,
//          dt3/2,    dt,  1.0f,  0.0f,  0.0f,  0.0f,  0.0f,  0.0f,  0.0f,
//          0.0f,   0.0f,  0.0f, dt4/4, dt3/2, dt2/2,  0.0f,  0.0f,  0.0f,
//          0.0f,   0.0f,  0.0f, dt3/2,   dt2,    dt,  0.0f,  0.0f,  0.0f,
//          0.0f,   0.0f,  0.0f, dt3/2,    dt,  1.0f,  0.0f,  0.0f,  0.0f,
//          0.0f,   0.0f,  0.0f,  0.0f,  0.0f,  0.0f, dt4/4, dt3/2, dt2/2,
//          0.0f,   0.0f,  0.0f,  0.0f,  0.0f,  0.0f, dt3/2,   dt2,    dt,
//          0.0f,   0.0f,  0.0f,  0.0f,  0.0f,  0.0f, dt3/2,    dt,  1.0f;

//     Q *= sigma_a * sigma_a;

//     // Measurement noise covariance
//     Matrix<double, 3, 3> R;
//     R << sigma_m*sigma_m, 0.0f, 0.0f,
//          0.0f, sigma_m*sigma_m, 0.0f,
//          0.0f, 0.0f, sigma_m*sigma_m;

//     // Initial state
//     // see ftest_init()

//     // Initial covariance
//     // see ftest_init()

//     // Predict step
//     e_x = F * e_x;
//     e_P = F * e_P * F.transpose().eval() + Q;

//     // Measurement update step
//     Matrix<double, 3, 1> z;
//     z << accelerationX, accelerationY, accelerationZ;
//     Matrix<double, 3, 1> y = z - H * e_x;
//     Matrix<double, 3, 3> S = H * e_P * H.transpose().eval() + R;
//     Matrix<double, 9, 3> K = e_P * H.transpose().eval() * S.inverse();
//     e_x = e_x + K * y;
//     Matrix<double, 9, 9> tm = (Matrix<double, 9, 9>::Identity() - K * H);
//     e_P = tm * e_P * tm.transpose().eval() + K * R * K.transpose().eval();

//     // Estimate of velocity is the first element of the state vector
//     //printf("V> % .9f, % .9f, % .9f, % .9f, % .9f, % .9f\n", e_x(0), e_x(1), e_x(2), e_x(3), e_x(4), e_x(5));
//     return e_x;
// }

// #ifdef IMU_USE_MAG
// void IMU_s::getMagMaxMin()
// {
//     // printf("Mag Raw %f, %f, %f\n", Magnetometer.Raw.X, Magnetometer.Raw.Y, Magnetometer.Raw.Z);
//     // printf("Mag Max %f, %f, %f\n", Magnetometer.Max.X, Magnetometer.Max.Y, Magnetometer.Max.Z);
//     // printf("Mag Min %f, %f, %f\n", Magnetometer.Min.X, Magnetometer.Min.Y, Magnetometer.Min.Z);
    
//     Magnetometer.Min.X = std::min(Magnetometer.Raw.X, Magnetometer.Min.X);
//     Magnetometer.Max.X = std::max(Magnetometer.Raw.X, Magnetometer.Max.X);
//     Magnetometer.Min.Y = std::min(Magnetometer.Raw.Y, Magnetometer.Min.Y);
//     Magnetometer.Max.Y = std::max(Magnetometer.Raw.Y, Magnetometer.Max.Y);
//     Magnetometer.Min.Z = std::min(Magnetometer.Raw.Z, Magnetometer.Min.Z);
//     Magnetometer.Max.Z = std::max(Magnetometer.Raw.Z, Magnetometer.Max.Z);
    
// }
// #endif

// #ifdef IMU_USE_MAG
// void IMU_s::calculateMagCal()
// {
//     // Get hard iron correction
//     Magnetometer.Bias.X  = (Magnetometer.Max.X + Magnetometer.Min.X) / 2.0f;
//     Magnetometer.Bias.Y  = (Magnetometer.Max.Y + Magnetometer.Min.Y) / 2.0f;
//     Magnetometer.Bias.Z  = (Magnetometer.Max.Z + Magnetometer.Min.Z) / 2.0f;
    
//     // Get soft iron correction estimate
//     double _ScaleX = (Magnetometer.Max.X - Magnetometer.Min.X) / 2.0f;
//     double _ScaleY = (Magnetometer.Max.Y - Magnetometer.Min.Y) / 2.0f;
//     double _ScaleZ = (Magnetometer.Max.Z - Magnetometer.Min.Z) / 2.0f;

//     double avg = _ScaleX + _ScaleY + _ScaleZ;
//     avg /= 3.0;

//     Magnetometer.Scale.X = avg / _ScaleX;
//     Magnetometer.Scale.Y = avg / _ScaleY;
//     Magnetometer.Scale.Z = avg / _ScaleZ;
// }
// #endif


