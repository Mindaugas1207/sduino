
// #ifndef INC_LINE_SENSOR_HPP_
// #define INC_LINE_SENSOR_HPP_

// #include "stdio.h"
// #include "pico/stdlib.h"
// #include "line_sensor_hw.h"
// #include <array>
// #include <vector>
// #include <algorithm>
// #include <limits>
// #include <cmath>
// #include <tuple>


// #define LINE_SENSOR_NUM_SENSORS LINE_SENSOR_HW_NUM_SENSORS
// #define LINE_SENSOR_CENTER_INDEX (LINE_SENSOR_NUM_SENSORS / 2)
// #define LINE_SENSOR_FIRST_INDEX 0
// #define LINE_SENSOR_LAST_INDEX (LINE_SENSOR_NUM_SENSORS - 1)
// #define LINE_SENSOR_LAST_VALUE 1.0f
// #define LINE_SENSOR_STEP_VALUE (2.0f * LINE_SENSOR_LAST_VALUE / LINE_SENSOR_LAST_INDEX)
// #define LINE_SENSOR_MAX_VALUE (LINE_SENSOR_LAST_VALUE * 35.0f)
// #define LINE_SENSOR_OFFLINE_MIN_VALUE (LINE_SENSOR_LAST_VALUE + LINE_SENSOR_STEP_VALUE)
// #define LINE_SENSOR_EDGE_VALUE (LINE_SENSOR_LAST_VALUE + LINE_SENSOR_STEP_VALUE)
// #define LINE_SENSOR_MAX_RIGHT LINE_SENSOR_MAX_VALUE
// #define LINE_SENSOR_MAX_LEFT -LINE_SENSOR_MAX_VALUE
// #define LINE_SENSOR_EDGE_LED_FIRST LINE_SENSOR_HW_RIGHT_CH
// #define LINE_SENSOR_EDGE_LED_LAST LINE_SENSOR_HW_LEFT_CH
// #define LINE_SENSOR_STROBE_EMITER LINE_SENSOR_HW_STRB_CH
// #define LINE_SENSOR_STATUS_LED LINE_SENSOR_HW_STATUS_CH
// #define LINE_SENSOR_THRESHOLD_CLEARANCE 0.1f
// #define LINE_SENSOR_LED_UPDATE_FREQUENCY 30
// #define LINE_SENSOR_LED_BLINK_FREQUENCY_CALIB 10
// #define LINE_SENSOR_CALIBRATION_TIME 3500
// #define LINE_SENSOR_TIMEOUT_TIME 500

// #define LINE_SENSOR_MAX_ANGLE_RAD 1.570796326794900f
// #define LINE_SENSOR_POS_TO_ANGLE_RAD 0.043505588000279f
// #define LINE_SENSOR_VALUE_TO_ANGLE_RAD 0.304539116001953f
// #define LINE_SENSOR_ANGLE_RAD_TO_POS (1 / LINE_SENSOR_POS_TO_ANGLE_RAD)
// #define LINE_SENSOR_ANGLE_RAD_TO_VALUE (1 / LINE_SENSOR_VALUE_TO_ANGLE_RAD)
// #define LINE_SENSOR_LAST_ANGLE_RAD (LINE_SENSOR_LAST_VALUE * LINE_SENSOR_VALUE_TO_ANGLE_RAD)
// #define LINE_SENSOR_EDGE_ANGLE_RAD (LINE_SENSOR_EDGE_VALUE * LINE_SENSOR_VALUE_TO_ANGLE_RAD)
// #define LINE_SENSOR_TURN90_ANGLE_RAD ((float)(M_PI / 2))
// #define LINE_SENSOR_TURN90_VALUE (LINE_SENSOR_LAST_VALUE * 5.0f)
// // (LINE_SENSOR_TURN90_ANGLE_RAD * LINE_SENSOR_ANGLE_RAD_TO_VALUE)




// #define LINE_SENSOR_ANALOG_WIDTH 5
// #define LINE_SENSOR_OFFSET_DECAY_COEF 0.6f
// #define LINE_SENSOR_POS_AVG_DECAY_COEF 0.6f
// #define LINE_SENSOR_OFFSET_THRESHOLD 3
// #define LINE_SENSOR_INDEX_LEFT_TH (LINE_SENSOR_CENTER_INDEX + (LINE_SENSOR_ANALOG_WIDTH / 2))
// #define LINE_SENSOR_INDEX_RIGHT_TH (LINE_SENSOR_CENTER_INDEX - (LINE_SENSOR_ANALOG_WIDTH / 2))
// #define LINE_SENSOR_CENTERLINE_TIMEOUT_US 1000

// #define LINE_SENSOR_OK PICO_OK
// #define LINE_SENSOR_ERROR PICO_ERROR_GENERIC

// class Sensor_s {
//     struct Config_s {
//         uint Min;
//         uint Max;
//     };

//     line_sensor_hw_inst_t *hw_inst;
//     float Offset;
//     float Span;
//     float ThresholdHigh;
//     float ThresholdLow;
//     float Value;
//     uint Pos;
//     uint Raw;
//     uint Min;
//     uint Max;
//     bool Detected;
//     bool Inverted;
// public:
//     typedef Config_s Config_t;

//     int init(uint _Pos, line_sensor_hw_inst_t *_hw_inst);

//     float & getValue(void) { return Value; }
//     bool & getDetected(void) { return Detected; }

//     void setEmitterEnable(bool _Enabled);
// 	void setEmitterPower(float _Power);
//     void setEmitterPower(uint _PWM);

//     void setLedEnable(bool _Enabled);
//     void setLedPower(float _Power);
//     void setLedPower(uint _PWM);

//     void startCalibration(void);
//     void calibrate(uint & _Input);

//     void setBlack() { Inverted = false;}
//     void setWhite() { Inverted = true;}
//     bool isWhite() { return Inverted; }
	
//     std::tuple<float, bool> compute(uint & _Input);

//     void loadConfiguration(Config_t _Config);
//     Config_t getConfiguration(void);
// };

// class LineSensor_s {
// public:
// enum LineRange_e {
//         LINE_CENTER,
//         LINE_LEFT,
//         LINE_RIGHT,
//     };

//     enum LineTurn_e {
//         LINE_NO_TURN,
//         LINE_TURN_LEFT,
//         LINE_TURN_RIGHT,
//         LINE_CROSSING,
//     };
// private:
//     struct Config_s {
//         std::array<Sensor_s::Config_t, LINE_SENSOR_NUM_SENSORS> SensorConfig;
//         float EmittersPower;
//         float LedBrightness;
//         float TurnGain1;
//         float TurnGain2;
//         float OffsetDecayCoef;
//         float AverageDecayCoef;
//         int AnalogWidth;
//         int OffsetThreshold;
//         int LeftThreshold;
//         int RightThreshold;
//         uint32_t CenterTimeout;
//         bool Calibrated;
//     };

// 	std::array<Sensor_s, LINE_SENSOR_NUM_SENSORS> Sensors;
//     line_sensor_hw_inst_t *hw_inst;
//     absolute_time_t LedUpdateTimeout;
//     absolute_time_t LedBlinkTimeout;
//     absolute_time_t CalibrationTimeout;
//     absolute_time_t SensorTimeout;
//     absolute_time_t CenterLineTimeout;

//     float Position;
//     float PositionAverage;
//     float OffsetAverage;
//     float EmittersPower;
//     float LedBrightness;
//     float TurnGain1;
//     float TurnGain2;
//     float LastFrameHeading;
//     float LineHeading;
//     float ph;
//     float OffsetDecayCoef;
//     float AverageDecayCoef;

//     float LineExpectedHeading;
//     enum LineRange_e LineRange;

//     enum LineTurn_e LineTurn;

    
    
//     int CenterLineIndex;
//     int AnalogWidth;
//     int OffsetThreshold;
//     int LeftThreshold;
//     int RightThreshold;
//     uint32_t CenterTimeout;
//     bool TLock;
//     bool Detected;
//     bool SensorTimedOut;
//     bool Available;
//     bool Calibrated;
//     bool DisplayAnalog;
//     bool LiveUpdate;
//     bool isWhite = false;

//     absolute_time_t DBG_PrintTimeout;
// public:
//     typedef Config_s Config_t;
//     typedef LineRange_e LineRange_t;
//     typedef LineTurn_e LineTurn_t;

//     class Line_s {
//     public:
//         int Start;
//         int End;
//         bool Color; // false black, true white

//         bool isBlack() { return !Color; }
//         bool isWhite() { return Color; }
//         int  width()   { return End - Start; }
//     };

//     std::array<Line_s, LINE_SENSOR_NUM_SENSORS> _Lines;
//     int _LineCount = 0;

//     int init(line_sensor_hw_inst_t *_hw_inst);
//     void reset();

//     bool isCalibrated(void) { return Calibrated; }
//     bool available(void) { return Available; }
//     bool isTimedOut(void) { return SensorTimedOut; }

//     void setTurnGain1(float _TurnGain1) { TurnGain1 = _TurnGain1; }
//     float getTurnGain1() { return TurnGain1; }
//     void setTurnGain2(float _TurnGain2) { TurnGain2 = _TurnGain2; }
//     float getTurnGain2() { return TurnGain2; }

//     void setOffsetDecayCoef(float _OffsetDecayCoef) { OffsetDecayCoef = _OffsetDecayCoef; }
//     float getOffsetDecayCoef() { return OffsetDecayCoef; }
//     void setAverageDecayCoef(float _AverageDecayCoef) { AverageDecayCoef = _AverageDecayCoef; }
//     float getAverageDecayCoef() { return AverageDecayCoef; }
//     void setAnalogWidth(int _AnalogWidth) { AnalogWidth = _AnalogWidth; }
//     int getAnalogWidth() { return AnalogWidth; }
//     void setOffsetThreshold(int _OffsetThreshold) { OffsetThreshold = _OffsetThreshold; }
//     int getOffsetThreshold() { return OffsetThreshold; }
//     void setLeftThreshold(int _LeftThreshold) { LeftThreshold = _LeftThreshold; }
//     int getLeftThreshold() { return LeftThreshold; }
//     void setRightThreshold(int _RightThreshold) { RightThreshold = _RightThreshold; }
//     int getRightThreshold() { return RightThreshold; }
//     void setCenterTimeout(uint32_t _CenterTimeout) { CenterTimeout = _CenterTimeout; }
//     uint32_t getCenterTimeout() { return CenterTimeout; }
	
//     void setEmittersEnable(bool _Enabled);
//     void setEmittersPower(float _EmittersPower);
//     float getEmittersPower();

//     void setLedsEnable(bool _Enabled);
//     void setLedsBrightness(float _Brightness);
//     float getLedsBrightness();

//     void setDisplayAnalog(bool _Enabled) { DisplayAnalog = _Enabled; }
//     bool getDisplayAnalog(void) { return DisplayAnalog; }
//     void setLiveUpdate(bool _Enabled) { LiveUpdate = _Enabled; }
//     bool getLiveUpdate(void) { return LiveUpdate; }

//     void calibrate(std::array<uint, LINE_SENSOR_NUM_SENSORS> & _Input, absolute_time_t _TimeNow);
//     void startCalibration(uint32_t _Duration_ms);
//     void startCalibration();

//     void start(void);
//     void stop(void);
//     bool process(absolute_time_t _TimeNow);

//     std::tuple<float, bool> getLineData();
//     std::tuple<float, bool> compute(absolute_time_t _TimeNow, std::array<uint, LINE_SENSOR_NUM_SENSORS> & _input);
//     float computeLineHeading(float _FrameHeading);
//     bool isDetected(void) {return Detected;};

//     std::tuple<LineRange_t, LineTurn_t> getLineDesc(void) { return {LineRange, LineTurn}; }

//     void updateLeds(absolute_time_t _TimeNow);

//     void loadConfiguration(Config_t _Config);
// 	Config_t getConfiguration(void);
// };



// #endif
